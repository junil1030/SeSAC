---
globs: *.swift
description: 성능 최적화 및 메모리 관리 가이드
---

# 성능 최적화 및 메모리 관리

## 성능 최적화 규칙

### final 키워드 적극 활용
```swift
// 클래스 상속이 필요 없는 경우 final 사용
final class MovieViewController: UIViewController { }
final class MovieViewModel { }
final class MovieCollectionViewCell: UICollectionViewCell { }

// 메서드 오버라이드가 필요 없는 경우 final 사용
final class NetworkService {
    final func request() { }
}
```

### 접근 제어자 명시적 사용
```swift
final class MovieViewController: UIViewController {
    // MARK: - Private Properties
    private let viewModel: MovieViewModel
    private let disposeBag = DisposeBag()
    
    // MARK: - Internal Properties (필요한 경우만)
    internal let collectionView: UICollectionView
    
    // MARK: - Public Properties (외부에서 접근 필요시만)
    public var onMovieSelected: ((MovieModel) -> Void)?
}
```

### lazy 초기화 활용
```swift
final class MovieViewController: UIViewController {
    // 무거운 객체는 lazy로 초기화
    private lazy var collectionView: UICollectionView = {
        let layout = UICollectionViewFlowLayout()
        layout.scrollDirection = .horizontal
        return UICollectionView(frame: .zero, collectionViewLayout: layout)
    }()
    
    private lazy var activityIndicator: UIActivityIndicatorView = {
        let indicator = UIActivityIndicatorView(style: .large)
        indicator.hidesWhenStopped = true
        return indicator
    }()
}
```

## 메모리 누수 방지

### weak 참조 사용
```swift
// 클로저에서 self 참조시 weak 사용
viewModel.output.movies
    .subscribe(onNext: { [weak self] movies in
        self?.updateUI(with: movies)
    })
    .disposed(by: disposeBag)

// 델리게이트 패턴에서 weak 사용
protocol MovieCollectionViewDelegate: AnyObject {
    func didSelectMovie(_ movie: MovieModel)
}

final class MovieCollectionView: UIView {
    weak var delegate: MovieCollectionViewDelegate?
}
```

### unowned 참조 사용 (순환 참조가 확실한 경우)
```swift
final class MovieViewModel {
    private let input: Input
    private let output: Output
    
    init() {
        self.input = Input()
        self.output = Output()
        
        // input과 output이 서로를 참조하는 경우 unowned 사용
        input.viewDidLoad
            .subscribe(onNext: { [unowned self] in
                self.handleViewDidLoad()
            })
            .disposed(by: disposeBag)
    }
}
```

### 메모리 해제 확인
```swift
final class MovieViewController: UIViewController {
    deinit {
        print("MovieViewController deallocated")
    }
}

final class MovieViewModel {
    deinit {
        print("MovieViewModel deallocated")
    }
}
```

## 컬렉션뷰 성능 최적화

### 셀 재사용 최적화
```swift
final class MovieCollectionViewCell: UICollectionViewCell {
    static let identifier = "MovieCollectionViewCell"
    
    // 셀 재사용시 상태 초기화
    override func prepareForReuse() {
        super.prepareForReuse()
        posterImageView.image = nil
        titleLabel.text = nil
        releaseDateLabel.text = nil
    }
}
```

### 이미지 로딩 최적화
```swift
final class MovieCollectionViewCell: UICollectionViewCell {
    private func loadImage(from url: URL) {
        // 이미지 캐싱 활용
        ImageCache.shared.loadImage(from: url) { [weak self] image in
            DispatchQueue.main.async {
                self?.posterImageView.image = image
            }
        }
    }
}
```

## 네트워크 성능 최적화

### 요청 취소 처리
```swift
final class NetworkService {
    private var dataTasks: [URLSessionDataTask] = []
    
    func request<T: Codable>(
        endpoint: APIEndpoint,
        responseType: T.Type,
        completion: @escaping (Result<T, NetworkError>) -> Void
    ) {
        let task = session.dataTask(with: urlRequest) { data, response, error in
            // 응답 처리
        }
        
        dataTasks.append(task)
        task.resume()
    }
    
    func cancelAllRequests() {
        dataTasks.forEach { $0.cancel() }
        dataTasks.removeAll()
    }
}
```

## UI 성능 최적화

### 메인 스레드 작업 최소화
```swift
// 무거운 작업은 백그라운드에서 수행
DispatchQueue.global(qos: .userInitiated).async {
    let processedData = self.processLargeDataSet(data)
    
    DispatchQueue.main.async {
        self.updateUI(with: processedData)
    }
}
```

### 불필요한 UI 업데이트 방지
```swift
// 값이 실제로 변경된 경우만 UI 업데이트
private var currentMovies: [MovieModel] = [] {
    didSet {
        guard currentMovies != oldValue else { return }
        updateCollectionView()
    }
}
```

## 메모리 모니터링
- Instruments의 Allocations 도구 활용
- 메모리 사용량 모니터링
- 순환 참조 검사
- 강한 참조 사이클 확인